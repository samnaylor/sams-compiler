program             ::= imports* externs* function_definition*
imports             ::= "import" identifier
externs             ::= "extern" function_signature
function_definition ::= "fun" function_signature ":" statement
function_signature  ::= identifier "(" [function_parameters] ")" "->" type_identifier

function_parameters ::= function_parameter ("," function_parameter)*
function_parameter  ::= identifier type_identifier

type_identifier ::= "i32"
                  | "[" type_identifier "]"  

statement ::= block_statement
            | var_statement
            | while_statement
            | return_statement
            | expr_statement
            | ifelse_statement
            | break_statement
            | continue_statement

block_statement    ::= ":" INDENT statement+ DEDENT
var_statement      ::= "var" declarator ("," declarator)* 
while_statement    ::= "while" expression ":" statement
return_statement   ::= "return" expression
expr_statement     ::= expression
ifelse_statement   ::= "if" expression ":" statement ["else" ":" statement]
break_statement    ::= "break"
continue_statement ::= "continue"

declarator  ::= identifier type_identifier "=" initialiser
initialiser ::= expression
              | "[" [expression ("," expression)*] "]"

expression     ::= assignment
assignment     ::= conditional
                 | postfix "=" assignment
conditional    ::= relational
                 | relational "?" expression ":" conditional
relational     ::= shift
                 | relational ">" shift
                 | relational "<" shift
shift          ::= additive
                 | shift (">>" additive)*
                 | shift ("<<" additive)*
additive       ::= multiplicative
                 | additive ("+" multiplicative)*
                 | additive ("-" multiplicative)*
multiplicative ::= postfix
                 | multiplicative ("*" postfix)*
postfix        ::= primary
                 | postfix "[" expression "]"
                 | postfix "(" [callargs] ")"
primary        ::= identifier
                 | constant
                 | "(" expression ")"
constant       ::= INTEGER

callargs ::= expression ("," expression)*
